Don't edit code, we're still talking. 

To answer your questions:
----
Document Upload UI (Step 1):
1. yes the drag-and-drop will be on the full page (i think there's an option for that for the playground component). 
2. Yes we need to know what file types and sizes, since that data is going to show up on the next page, as to all the documents the user uploads.
3. Those boxes are hard coded, since they're suggested documents to upload. And it's worth noting that when the user uploads a document -- there needs to be logic that checks to see what kind of file it is. If it is a SOC report, the soc box validates as green to visualize that that specific type of file was uploaded. The same for the rest of the boxes. And for any documents that are uploaded that don't fit into the SOC 2 Audit Report, ISO 27001 Certification, Penetration Test Report, Business Continuity Plan types it validates the Other Documents box and increases the count shown.
4. Yes, we need to handle bulk file uploads.
5. Also it's worth noting, since this user is uploading files to our application, all uploaded files should also be recognized and stored in the file vault.
----
Processing Stage (Step 2):
1. The page starts with processing the first (top) file, showing a loading spinner, highlighted light grey background, and (Calculating Questions Answers...) in place of where the final result count answers will be shown. Users can hover over the actively processing file line item in the rows which will show a rough estimate of time it will take to process the file -- so if when initiated the process is expected to take 20 seconds, when hovering, the hover popover will show Estimated Processing Time: 20 seconds.
2. No, for now just show the count to the user, and the system should obviously keep track of the answers+question number+question+document the answers were found from since we'll need that data for the final step in the wizard, and then ultimately will need it for updating the document for the card form responses.
3. The openai should just find all of the total answers found for each file, then when the user clicks next on this second processing step, the system will compare any conflicting answers for each question number and then comprise a logical answer that is a best mix of the two answers; taking into account that if there's conflicting information, that is noted in the answer; since we want to be accurate as to what data we found. And takign into account if there's duplicate answer data, then we would just use the answer instead of having two of the same answer data in one.
4. Documents that are uploaded to the system are uploaded to the file vault, this will also allow the openai system to get the file name and find the file, process the data, and then analyze the data for the possible answers within.
----
Review Stage (Step 3):
1. We don't need to show them here since they're going to finish the form and they'll see the autofilled answers from this uploaded-documents processing.
2. They'll be able to edit the answers in the form afterwards, so there's no need to validate the answers, since the data we got from the answers is already in the documents they specifically gave us; we can assume it's all accurate data, since it's from their documents.
3. I'm not sure what you mean by partial uploads. The user is only able to move on to the 3rd Review step if all of the documents were uploaded and processed for answers, as indicated by one of the screenshots (DocUpload_Wizard_Step2_A) showing disabled buttons while documents are being uploaded.
----
Technical Integration:
1. We already have the file vault files database.
2. We'll worry about the openai prompts later, for now just keep note of the functionality that will be using openai and a description of its functinoality.
3. Sequentially, on WizardStep3.
4. I believe openai will do this if we feed it pdfs for example.