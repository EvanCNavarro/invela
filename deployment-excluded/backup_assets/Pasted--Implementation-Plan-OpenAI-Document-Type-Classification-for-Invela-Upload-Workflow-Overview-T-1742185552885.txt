# Implementation Plan: OpenAI Document Type Classification for Invela Upload Workflow

## Overview
This document outlines the integration of OpenAIâ€™s GPT-powered document classification into the existing Invela file upload workflow. This feature automatically categorizes uploaded documents into one of five compliance categories:

- **SOC 2 Audit Report**
- **ISO 27001 Certification**
- **Penetration Test Report**
- **Business Continuity Plan**
- **Other Documents**

---

## Step-by-Step Integration Plan

### âœ… Step 1: File Upload (Existing)
- User uploads file via drag-and-drop interface.
- Client-side validation ensures acceptable file type and size.
- File uploaded to `/api/files` endpoint.
- File stored securely in `/uploads`.
- File metadata (name, path, type, size, user_id, company_id, status, timestamps, version, download_count) saved in the database.

### ðŸ”¸ Step 2: OpenAI Document Classification (New Step)
- Immediately after successful file storage, trigger the OpenAI API call.
- Server-side extracts key text from the uploaded file (initial pages or content snippet).
- Construct API request to OpenAI GPT model using structured classification prompt:

```
Prompt:
"You are an expert compliance analyst. Classify the following document text snippet into one of these document types ONLY:
- SOC 2 Audit Report
- ISO 27001 Certification
- Penetration Test Report
- Business Continuity Plan
- Other Documents

Snippet:
<Extracted Document Text>

Return only the exact document type."
```
- Receive classification response from OpenAI (e.g., `"SOC 2 Audit Report"`).

### ðŸ”¸ Step 3: Store Classification Result (New Step)
- Update the file's database record to include a new field `document_type`:

```json
{
  "name": "DataTechCompany_SOC2_Report_2025.pdf",
  "path": "uploads/1710723412-abc-DataTechCompany_SOC2_Report_2025.pdf",
  "type": "application/pdf",
  "size": 6291456,
  "user_id": "user_123",
  "company_id": "company_456",
  "status": "uploaded",
  "document_type": "SOC 2 Audit Report",
  "created_at": "2025-03-17T00:00:00Z",
  "updated_at": "2025-03-17T00:00:00Z",
  "version": "1.0",
  "download_count": 0
}
```

### âœ… Step 4: Return Response & Update Front-End (Slight Modification)
- Return updated database record (including classification).
- Front-end updates UI, highlighting or automatically selecting the category identified by OpenAI.
- User can manually confirm or change the classification if necessary.

---

## Recommended Implementation Approach

- **Primary Approach**: Integrate OpenAI document classification directly into the existing `/api/files` endpoint.
- **Alternative (Asynchronous)**: If latency concerns arise, implement classification as a background job via a queue system (e.g., Bull, RabbitMQ).

---

## Considerations
- Ensure robust error handling for OpenAI API failures or timeouts.
- Implement logging/auditing for the classification decisions.
- Optionally provide manual overrides by users for edge cases or misclassifications.

---

End of Implementation Plan.

