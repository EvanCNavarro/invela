## Implementation Plan: Wizard Step 2 – Document Processing and Answer Aggregation

This document outlines a structured plan for processing uploaded documents, chunking text for OpenAI processing, maintaining persistent state across wizard navigation, and clearly presenting UI updates.

---

## Step 1: UI Structure & User Experience

- **Document Row Layout:**
  - Display each uploaded document clearly in a table with columns:
    - **Status Icon:**
      - ✅ Green circle-check for processed documents.
      - Invela logo spinner for documents currently processing.
      - Grey circle-dashed for pending documents.
    - **File Name**
    - **File Size**
    - **Processing Result Context:**
      - "(Calculating Questions Answers...)" for actively processing documents.
      - Total count of answers found displayed in green text (e.g., "120 Answers Found") upon completion.
      - Empty for pending documents.
  - Highlight actively processing rows with a light grey background color.
  - Disable the **Next** and **Back** buttons until processing completes.

## Step 2: Compliance Questions Retrieval
- Retrieve compliance questions from `card_fields.json` with these fields:
  - `field_key`
  - `question`
  - `ai_search_instructions`
  - `partial_risk_score_max`
  - `id_card_responses_field_id`

## Step 3: Estimated Processing Time
- Calculate and display an estimated total processing time before starting file analysis.
- Dynamically update the estimated time remaining after each file completes processing, reflecting the actual processing speed.

## Step 4: File Chunking & OpenAI Processing
- Implement file-agnostic chunking strategy:
  - PDFs: Extract text from the first ~3 pages using `pdf.js-extract`, limited to ~16,000 characters.
  - DOC/DOCX/TXT/CSV: Extract text similarly to handle OpenAI token limits.
- Process each document sequentially, chunk by chunk.
- For each chunk, send the extracted text to OpenAI using the prompt:

```javascript
const prompt = `
You are a compliance analyst. Given the document chunk below, analyze and determine which compliance questions it answers based on provided "ai_search_instructions" for each question. Provide extracted answers in JSON format as follows:

Document Text Chunk:
${extractedTextChunk}

Compliance Questions:
${questionsWithSearchInstructions}

JSON Response Format:
{
  "answers": [
    {"field_key": "question_field_key", "answer": "Extracted relevant information from the document."}
  ]
}

Clearly reference the source document within each answer (e.g., "According to SOC2.pdf: [Answer Data]")."
```

- Process each file sequentially, updating real-time progress indicators and estimated remaining processing time dynamically.

## Step 5: Aggregation & Answer Management
- Aggregate answers by question, ensuring:
  - No redundancy: identical answers across documents are combined.
  - Source attribution: clearly attribute answers from each document.

Example Aggregation:
> "According to SOC2.pdf: [Answer Data]. According to Compliance.pdf: [Additional Answer Data]."

## Step 6: Final Data Preparation for Wizard Step 3
- After processing is complete, structure the processed and aggregated answers clearly.
- Provide total answer count found for display in the UI at Step 3 (Review step), as shown in the provided UI screenshot.

