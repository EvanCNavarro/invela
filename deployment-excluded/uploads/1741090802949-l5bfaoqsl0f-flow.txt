I want to make sure that we have the flow in the backend mapped out for the front-end

So on the front end.
[referring to 'ui_step1.png']:
we plan to have a screen upon load for the user that lets the user choose and specify who they are (whether they're Ivan or Isaac). For now (but in the future maybe more, so allow for the creation of users still possible with the code) for now there will only be 2; my little brothers; Ivan, and Isaac
They'll have the attached images for they're user pfp icons.
On the screen they can click and choose which to login as.

[referring to 'ui_step2.png']:
there's grey hover effect border that matches the active selection blue border that you'll see throughout the app screenshots, but when the user clicks it will choose that user account and load that user's data to show on the app. so it will load their worlds, their characters for those worlds, the stories (videos) for those worlds with the characters.

[referring to 'ui_step3.png']:
after selecting an account, the ui changes to make room for the flow and actions below; by moving the smaller user account icon to the top left, and the the app title top as well.
Under is 4 sections (3 first to the left that are of even size, and a larger one last on the right).
The first section is for the worlds that the user has created or can create (via the +NEW button -- which will open a modal asking them to describe the world then gives 5 suggestions for names and allows them to choose a name then the system will generate an emoji for the 'model' aka world based on the description and name context) [so there will need to be logic around this too, analyze name, context description of thing, and previous context of the things that exist before the thng being created -- such that if an emoji is to be generated for a story, and the world is a candyland environment it would make sense to have some relation to that context, and there needs to be a check of all existing emojis used for this user such that no duplicate emojis can be used]
when the user selects a world it then allows for the next section to be popluated with the relevant models and actions, and in this case it's the characters and +NEW button for new characters -- and when selected it has the homogenously used big blue rounded border select indication on the model emoji icon.
also worth noting that createing a new character has the same structure modal when clicked the +NEW button for a character as the world creation, where it asks for context around the character and then asks for a name but gives 5 suggestions for names.

[referring to 'ui_step4.png']:
when a world is selected all of the existing characters for that world are shown [should be known and changed in the code if needed, that stories and characters belong to a world and every world belongs to either ivan or isaac (belong to a user)]
and in the case of the screenshot reference, the spooky world (bat emoji), has 3 characters in that world (ninja, gorilla, and strongman)
The user also is shown an +NEW button in the next column section which is for the stories. but shown they don't have any stories created, despite having created a world, and created 3 characters for that world

[referring to 'ui_step5.png']:
shows the user selecting to add a new story for that world which can include those characters

[referring to 'ui_step6.png']:
[the system needs to have logic that does the following: take context in order of: take context of world, take context of characters that exist, take context of stories that exist, then predict or suggest a story that would make sense and help expand the overall lore storyline -- that suggestion idea will ALSO then manifest into a temporary emoji -- and it will manifest as a suggestion that the system gives the user upon initial greeting when they're trying to create a new story]
so the user has selected to create a new  story and has had an emoji generated that matches the suggestion the user will be given at the start.
at the start text shows greeting the user, and starting on with the script for creating the world. the text will be shown and the audio will play reading out that text.
[Hello Ivan, what do you want this new story to be about? Maybe it can be about {short concise 4 words or less description of the temporary suggestion idea]
Shown in the screenshot is a microphone button, which when clicked will trigger the audio of the user, but it can only be clicked after the system has finished their line of text -- so it'll be a turn taking logic for putting out audio and taking audio. When the mic is clicked again it stops taking audio

[referring to 'ui_step7.png']:
Shows the fact that when the audio is active, it shows the selection border indication on the button, and the text that the user is saying is showing dictating the text in the text box so the user can see what they're saying (speech to text).

[referring to 'ui_step8.png']:
system accepted the text and there should be back and forth not shown here about the system generating 5 bullet points about the overall structure of the story (this should follow the hero's journey @https://en.wikipedia.org/wiki/Hero%27s_journey OR be more of a cliff hanger story to build tension for the user and lead to more evolutions of a story and characters)
but afterwards it will tell and show text to the user that it's going to make the story now.
And it should create a new emoji for this story object based on all context; world, characters, story.

[referring to 'ui_step9.png']:
while the actions are taking place the text shown (and read to the user) should be the steps that are takign place.
(The system will have a loading animation spinner under the text and when it reaches a new stage it will show the text for that next stage and read out the audio telling the user the text for that stage, shown below. The text and audio for that section will be shown and read out without interrupting, So the actions of the system need to wait for the text and audio to be read to the user on this OR what i assume better best practices is, is to have a loading queue that is just added to and whenever one audio/text is finished it will just move on to the next in the queue so that the system doesn't have to wait for the front-end and can be more efficient (DO THIS ONE in a simple way)]

- "Okay, let's make your story, one moment Ivan."
- "1. Building out the details for your story."
- "2. Breaking the story into smaller sections."
- "3. Creating the audio for those sections."
- "4. Generating pictures for each section."
- "5. Thinking about how to animate the images."
- "6. Turning the images into smaller videos."
- "7. Putting the audio together."
- "8. Putting the video together."
- "9. Putting the final story together."
- "10. Your new story is ready now, Ivan."

[referring to 'ui_step10.png']:
then after a slight pause the content in the box (story section) is replaced with the finished video because there's an existing story and this is the view that would happen if a user clicks an existing story, which in this case is what is essentially happening now.
(user would click story and the video would populate)
(when a user clicks add new that's when the previous flow of adding new and talking and loading etc would be shown in the story section box)
When the user sees a video, they can play it.
And they can pause it.
And after wards, they can play it again.
The story should obviously be the file they created (video and audio story they created)
