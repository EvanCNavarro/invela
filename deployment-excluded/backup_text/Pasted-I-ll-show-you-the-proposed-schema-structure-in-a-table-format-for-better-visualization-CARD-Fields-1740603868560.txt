I'll show you the proposed schema structure in a table format for better visualization:

CARD Fields Table (card_fields)
| Column Name | Type | Constraints | Description |
|------------|------|-------------|-------------|
| id | serial | PRIMARY KEY | Auto-incrementing ID |
| field_key | text | NOT NULL, UNIQUE | Unique identifier (e.g., "security_access_control") |
| wizard_section | text | NOT NULL | Section label (e.g., "Security") |
| question_label | text | NOT NULL | Question title (e.g., "Access Control") |
| question | text | NOT NULL | Full question text |
| example_response | text | NULL | Tooltip example answer |
| ai_search_instructions | text | NULL | AI processing guidelines |
| partial_risk_score_max | integer | NOT NULL | Maximum risk score for question |
| created_at | timestamp | DEFAULT NOW() | Creation timestamp |
| updated_at | timestamp | DEFAULT NOW() | Last update timestamp |

CARD Responses Table (card_responses)
| Column Name | Type | Constraints | Description |
|------------|------|-------------|-------------|
| id | serial | PRIMARY KEY | Auto-incrementing ID |
| task_id | integer | NOT NULL, FOREIGN KEY | References tasks.id |
| field_id | integer | NOT NULL, FOREIGN KEY | References card_fields.id |
| response_value | text | NULL | User's answer |
| ai_suspicion_level | real | NOT NULL, DEFAULT 0 | AI-computed risk % (0-100) |
| partial_risk_score | integer | NOT NULL, DEFAULT 0 | Computed risk score |
| status | text | NOT NULL, DEFAULT 'empty' | Status of response |
| version | integer | NOT NULL, DEFAULT 1 | Version number |
| created_at | timestamp | DEFAULT NOW() | Creation timestamp |
| updated_at | timestamp | DEFAULT NOW() | Last update timestamp |

Relationships

export const cardFieldsRelations = relations(cardFields, ({ many }) => ({
  responses: many(cardResponses)
}));
export const cardResponsesRelations = relations(cardResponses, ({ one }) => ({
  field: one(cardFields, {
    fields: [cardResponses.field_id],
    references: [cardFields.id]
  }),
  task: one(tasks, {
    fields: [cardResponses.task_id],
    references: [tasks.id]
  })
}));
Would you like me to proceed with implementing these tables in schema.ts?

