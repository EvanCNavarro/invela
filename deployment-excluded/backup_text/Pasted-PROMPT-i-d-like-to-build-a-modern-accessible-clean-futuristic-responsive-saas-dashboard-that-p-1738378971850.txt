PROMPT:
i'd like to build a modern, accessible, clean, futuristic, responsive, saas dashboard that provides a view for users (from FinTechs, Banks, Insurance Firms, etc.) providing information around: Accreditation, Risk & Fraud, Data Access, Reporting, Liability & Insurance, etc. The application will need to be connected to a database. It will have modern authentication for users. It will have stored company data in a registry, similar to applications/companies like Crunchbase; such that the user can search and find FinTech companies their company is involved with.

The design of the application will adhere to the attached a11y accessibility standards, to make the application accessible at least to AA ratings; ideally AAA.

The design will adhere the following modern code standards, and any other standards you’d suggest to follow as well
```
File-based routing:
Utilize Next.js's file-based routing system in the `pages` directory.
Example: `pages/about.js` automatically creates a route for `/about`.
Optimize component structure:
Break down complex UI elements into smaller, reusable components.
Each component should have a single responsibility.
Server-side rendering (SSR):
Use Next.js's built-in SSR support for improved performance and SEO.
Determine which parts need SSR and which can use Static Site Generation (SSG).
React Hooks:
Use hooks wisely to manage state and side effects.
Avoid excessive nesting and extract logic into custom hooks when appropriate.
Error handling and testing:
Implement Error Boundaries for graceful error handling.
Use Jest and React Testing Library for comprehensive testing.
Image optimization:
Utilize the `next/image` component for automatic image optimization.
Code formatting and linting:
Use ESLint and Prettier for consistent code formatting and style enforcement.
Client-side data fetching:
Use Next.js's data fetching methods (`getStaticProps`, `getServerSideProps`) or libraries like SWR for efficient client-side data fetching.
Code splitting and lazy loading:
Leverage dynamic imports and `React.lazy()` for code splitting and lazy loading of components.
Cache management:
Implement client-side and server-side caching strategies.
Utilize Next.js's built-in caching features and consider external solutions like Redis.
```

The design of the ui through the project will follow a 4px grid system.
Any mention of px in the code will instead be defined in rem and em standards, where 16 px = 1 rem.

The project will use tailwindcss for styling in the code.

The project will user framer motion for animation.

The project will use HSL for colors, and will always translate any given colors (in any other forms like rgb, hex, etc.) into HSL

The project will use material design icons.

The default text font will be “IBM Plex Sans” for body text characters and “IBM Plex Mono” for numerical characters.

The base font default size will be 16 for normal text, 14 for smaller, 18 for bigger, and 24 for biggest (page title headers) with varying standards for bolding, light, regular, etc.

The entire app will be responsive; especially working with standard popular screen sizes.

The app will have a light mode and dark mode.

The user will first need to be authenticated through the log in page (which has two additional features: 1. modern password reset feature/functionality, requiring quick, simple, automated, and free email OTP generation and sending mechanism to sent the password reset email to the user, AND 2. User registration) [refer to attached image “page_auth_reference” for content and page structure but replace any mention of “IBM” shown on the design with “Invela”

The application will have a responsive, expandable, collapsable, modern, clean, side menu with hoverable, clickable components for primary navigation throughout the application [refer to “dashboard_sidebar_collapsed_reference.png” and “dashboard_sidebar_expanded_reference.png”]:
the Invela logo  icon and “Invela” text (name of company that this application is created/designed by) [refer to “logo_invela.svg”]
The navigation tabs:
Dashboard
Task Center
Registry
Insights
Collapse/Expand Sidebar Icon

The application main body section (to the right of the sidebar) will have a:
A – top navbar, with a search bar on the left section of the navbar that searches for text content throughout the application and will suggest navigation rerouting options based off the users entered text input (whether it be based of exact text, or similar text relating to a tab page), and 2. A user centered right section with: 1. a lightmode/dark mode toggle, 2. help icon that opens a modern drop down with “Send Feedback”, “What’s New?”, “FAQs”, “Help Center” options, and 3. User avatar that opens a similarly styled dropdown with standard options like user overview info, settings, notifications, logout, etc.
B – main body page content space, which will have:
If applicable after deeper inner page/tab navigation, breadcrumb navigation
Page title header
Page description if necessary for niche pages (not common ones)
Page content

The user after authenticated will always first navigate to a home dashboard. The dashboard will feature a responsive, clean, modern, bento style design of widget boxes – which are customizable but the user (by accessing a button on the top right of the page content, right of the page title header, which opens a dropdown menu with checkable and uncheckable list of the total widgets). The dashboard will be to show an overview of all of the total features and functions of the app, at a top overview level. Each widget can is editable via an ellipses button on the top right of the widget box. The list of widgets are as follows:
“What you missed” (acting as a space to show a dismissable/clearable list of items representing any changes that relate to the user or company, new tasks, new major risk changes, etc. since the user last logged in)
“Announcements from Invela” (acting as a advertisement space to show user new changes from the changelog or notification banner box messages)
“Quick Actions” (acting as a widget housing 4 clickable action item button/links for common user actions like: “Add New FinTech Relationship”, “Add New User”, “Set New Risk Trend Tracker”, and have this widget be editable such that the user can edit the links and choose which 4 user actions to display within the widget based off a list of 10 popular actions. If completely empty the widget will show a CTA information the user that there are not user actions chosen and for the user to edit and add some.
“Your Company Score” (acting as a showcase overview of information from the logged in users’ company, so they can see how themselves look within the system, despite primarily being focused on other company’s representation within the system)
“Top 10 by ____” (acting as a manipulatable all around table of the logged in users’ company’s top 10 companies based on whatever the selected filter is. The “_____” in this title example is actually a clickable dropdown filterable list of options like: Risk Score, Consents, Potential Liability, Risk Trend, Name (an alphabetical option), etc.
“Network Visualization” (acting as a circular network graph or radial tree diagram diagramming the logging in company’s (center major node) relationship with the other secondary nodes (FinTechs that the logged in user/company is involved with), with the nodes and lines respectively following a color and size scale based upon the amount of business done between both.

The task center tab in the side menu will show a small box with the count of incomplete (pending/active/new) tasks to be completed by the user, on the right of the tab button. On the actual tab center page, there will be tab navigation under the page title for the “incomplete” and “completed” tasks, with a table layout underneath of data dependent on which tab they’re looking at.

The registry page will be a page for the user to search the “Invela Registry Database” which is a database of all of the companies that have been entered by users as well as by Invela themselves. It will also show recent searches  (most recent, and past: within the last month), underneath the search bar as clickable action links. It will also show a action button for the user to add a new company to the registry if they don’t seem to find it in the search, etc.
To start off the registry, the find the top 100 fintechs in the world, and include for each information like: Company name, company logo, company description, company type, location (address), phone, website, company size, employees, website, cb rank, social media links, recent news and activity, duns number, ein, experian bin, formation date, annual revenue, credit score, nato stock code, invela company risk score, invela accreditation (include any other points of data that would be beneficial for tracking by a company registry database like crunchbase, moony’s, DNB, linkedin, etc.)

The insights page will be a page for the user to show graph visualizations based off the entire data available to them throughout the application and their accessible company data/relationships/etc. The goal for this page is for the user to choose a visualization type for the data, filter their data, save and name the filtered visualized data, and have the ability to from a drop down menu access previously saved menu and export any actively viewed visualized data via pdf. 
