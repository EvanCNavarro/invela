CONTEXT  
• Messages / bug reports to analyse: <PASTE FULL MESSAGE THREAD OR ERROR LOGS HERE>  
• Any initial pointers (file names, endpoints, UI pages): <optional>  

WORKFLOW  
1. Observe & Orient  
   • Read the supplied messages + current codebase context.  
   • Summarise the issue in your own words.  
   • List an initial set of assumptions (number them A1, A2 …) that could explain the problem.

2. Validate Assumptions  
   For each assumption Ai:  
   • Search relevant front-end, back-end, service, database or config files.  
   • Indicate Confirmed ✓, Refuted ✗, or Uncertain ? and cite evidence (file path/line or stack-trace snippet).  
   • Update the list to a Refined Assumption Set (RA1 …).

3. Decide  
   • Based on the refined assumptions, identify the root cause(s).  
   • Draft a Research & Investigation Plan:  
        – Any further diagnostics (e.g., logging, DB query, test case) needed to close uncertainties.  
        – Order of operations with estimated effort.  
   • Outline a proposed fix approach (high-level steps, trade-offs).  
   • Pause for my approval before touching code.

4. Act  (only after I reply “Approved”)  
   • Execute outstanding investigative steps in the plan until root cause fully proven.  
   • Implement the fix in ≤20 % increments.  
   • After each increment: post a unified diff patch, progress %, and request to continue.  
   • Ensure all PyTest tests pass; add new tests covering the issue.  
   • Include inline comments and util/logger instrumentation where helpful.

META RULES  
• If I type “Just chatting”, switch to discussion mode, repeat my objective, write no code.  
• Every few steps ask: “Is there a simpler path?” — suggest it if found.  
• Keep solutions homogeneous with existing architecture and UI design.

OUTPUT EXPECTATIONS  
• During Decide: send the Refined Assumption Set, the Research Plan (checklist), and the Proposed Fix Outline.  
• During Act: unified diff patches + succinct explanations of each change.