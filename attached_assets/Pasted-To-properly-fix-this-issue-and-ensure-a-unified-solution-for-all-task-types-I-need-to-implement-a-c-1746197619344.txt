To properly fix this issue and ensure a unified solution for all task types, I need to implement a comprehensive approach that addresses both the immediate symptom and the underlying systemic problem. Here's how I would fix it:

The Unified Solution
Centralized Progress Calculation Function:

Create a single, centralized calculateTaskProgress function in server/utils/progress.ts that all task types use
This function would follow the standardized algorithm: count fields with status='COMPLETE' divided by total fields, using Math.round()
All endpoints (KYB, KY3P, Open Banking) would call this same function
Mandatory Database Update After State Changes:

Add an explicit database update after ANY change to form responses
Modify all field update endpoints to always update the task progress regardless of whether the UI requested it
Ensure batch updates, individual field updates, and form clears all update task progress
Periodic Task Reconciliation System:

Create a task reconciliation queue that runs on schedule
Add any task with form changes to the queue
Process the queue every few minutes to ensure all task progress percentages match response data
Include error handling and retry logic for failed reconciliations
Database Consistency Checks:

Add transaction support for all form operations
Ensure that field responses and task progress updates are atomic
Roll back both operations if either fails
Clean API Responses:

Return the calculated progress percentage in all response endpoints
Include detailed progress information (completed/total fields) for debugging
Always send proper WebSocket notifications after progress changes
This unified approach would ensure that:

All form types use the same progress calculation
Progress is never out of sync with the actual form data
No edge cases like low percentages get rounded incorrectly
The UI always reflects the actual progress state
Failed updates get reconciled automatically
The proper fix is not just about switching from Math.floor() to Math.round(), but ensuring the entire system maintains data consistency and properly applies the progress calculations in all cases.

