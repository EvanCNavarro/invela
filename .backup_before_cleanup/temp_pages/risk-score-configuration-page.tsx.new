import React, { useEffect } from 'react';
import { DashboardLayout } from "@/layouts/DashboardLayout";
import { PageHeader } from "@/components/ui/page-header";
import { PageTemplate } from "@/components/ui/page-template";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BarChart, FileCode, Globe2, MessageSquare, AlertTriangle, Database, GripVertical, Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Separator } from "@/components/ui/separator";
import { Slider } from "@/components/ui/slider";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ComparativeVisualization } from '@/components/risk-score/ComparativeVisualization';
import { RiskGauge } from '@/components/risk-score/RiskGauge';
import { useToast } from "@/hooks/use-toast";
import riskScoreLogger from "@/lib/risk-score-logger";
import { useRiskScoreData } from "@/hooks/use-risk-score-data";
import { DndProvider } from 'react-dnd';
import type { DragSourceMonitor, DropTargetMonitor } from 'react-dnd';
import { useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { RiskDimension } from '@/lib/risk-score-configuration-data';

// Define dimension icons for visual representation
const dimensionIcons: Record<string, React.ReactNode> = {
  cyber_security: <FileCode className="h-5 w-5" />,
  financial_stability: <BarChart className="h-5 w-5" />,
  dark_web_data: <Globe2 className="h-5 w-5" />,
  public_sentiment: <MessageSquare className="h-5 w-5" />,
  potential_liability: <AlertTriangle className="h-5 w-5" />,
  data_access_scope: <Database className="h-5 w-5" />
};

// Props for dimension row component
interface DimensionRowProps {
  dimension: RiskDimension;
  index: number;
  onReorder: (dragIndex: number, hoverIndex: number) => void;
  onValueChange: (id: string, value: number) => void;
}

// Define the item type for drag-and-drop
const ItemTypes = {
  DIMENSION_ROW: 'dimensionRow'
};

// Skeleton component for dimension rows during loading state
const DimensionRowSkeleton = () => (
  <div className="flex items-center space-x-4 p-4 border rounded-md mb-2 animate-pulse">
    <div className="h-8 w-8 bg-gray-200 rounded"></div>
    <div className="flex-1">
      <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
      <div className="h-3 bg-gray-100 rounded w-3/4"></div>
    </div>
    <div className="w-1/3 h-4 bg-gray-200 rounded"></div>
    <div className="h-8 w-8 bg-gray-200 rounded"></div>
  </div>
);

// Type for drag item
interface DragItem {
  index: number;
  id: string;
  type: string;
}

/**
 * Draggable and droppable dimension row component
 * Allows reordering of risk dimensions through drag and drop
 */
const DimensionRow: React.FC<DimensionRowProps> = ({ dimension, index, onReorder, onValueChange }) => {
  // Set up drag functionality
  const [{ isDragging }, drag, dragPreview] = useDrag({
    type: ItemTypes.DIMENSION_ROW,
    item: { type: ItemTypes.DIMENSION_ROW, id: dimension.id, index },
    collect: (monitor: DragSourceMonitor) => ({
      isDragging: monitor.isDragging()
    })
  });

  // Set up drop functionality
  const [{ handlerId }, drop] = useDrop({
    accept: ItemTypes.DIMENSION_ROW,
    collect(monitor) {
      return {
        handlerId: monitor.getHandlerId()
      };
    },
    hover(item: DragItem, monitor: DropTargetMonitor) {
      if (!drop) {
        return;
      }
      
      // Don't replace items with themselves
      if (item.index === index) {
        return;
      }
      
      // Call the reorder function
      onReorder(item.index, index);
      
      // Update the index for the dragged item
      item.index = index;
    }
  });

  // Combine drag and drop refs
  const ref = (node: HTMLDivElement) => {
    drag(node);
    drop(node);
  };

  // Render dimension row
  return (
    <div 
      ref={ref}
      data-handler-id={handlerId}
      className={`flex items-center space-x-4 p-4 border rounded-md mb-2 transition-opacity ${isDragging ? 'opacity-50' : 'opacity-100'}`}
      style={{ 
        backgroundColor: `${dimension.color}10`, 
        borderColor: `${dimension.color}40` 
      }}
    >
      <div className="cursor-move" ref={dragPreview}>
        <GripVertical className="h-5 w-5 text-gray-500" />
      </div>
      
      <div className="flex-1">
        <div className="flex items-center">
          <div 
            className="p-1 rounded mr-2" 
            style={{ backgroundColor: dimension.color }}
          >
            {dimensionIcons[dimension.id] || <div className="h-5 w-5" />}
          </div>
          <div>
            <h4 className="font-medium text-gray-900">
              {dimension.name}
              <span className="ml-2 px-2 py-1 bg-gray-100 text-xs rounded">
                Priority {index + 1}
              </span>
            </h4>
            <p className="text-sm text-gray-500">{dimension.description}</p>
          </div>
        </div>
      </div>
      
      <div className="space-y-1 w-1/3">
        <Slider
          defaultValue={[dimension.value]}
          min={0}
          max={100}
          step={1}
          value={[dimension.value]}
          onValueChange={(value) => onValueChange(dimension.id, value[0])}
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>Low</span>
          <span>Medium</span>
          <span>High</span>
        </div>
      </div>
      
      <div className="text-right font-medium w-16 text-gray-900">
        {dimension.weight.toFixed(0)}%
      </div>
    </div>
  );
};

/**
 * Risk Score Configuration Page
 * Allows users to configure risk score calculations and dimension priorities
 */
export default function RiskScoreConfigurationPage() {
  // Initialize the toast component
  const { toast } = useToast();
  
  // Log page initialization
  useEffect(() => {
    console.log('Direct console log - RiskScoreConfigurationPage mounted');
    riskScoreLogger.log('init', 'Risk score configuration page initialized');
  }, []);
  
  // Use the risk score data hook for state management
  const {
    dimensions,
    thresholds,
    score,
    riskLevel,
    userSetScore,
    isLoading,
    isSaving,
    handleReorder,
    handleValueChange,
    handleSave,
    handleReset,
    handleScoreChange,
    setUserSetScore
  } = useRiskScoreData();
  
  // Function to render toast when dimension reordering changes
  const handleDimensionReorder = (dragIndex: number, hoverIndex: number) => {
    handleReorder(dragIndex, hoverIndex);
    
    // Show toast if first dim moved to last or last to first (major change)
    if ((dragIndex === 0 && hoverIndex === dimensions.length - 1) || 
        (dragIndex === dimensions.length - 1 && hoverIndex === 0)) {
      toast({
        title: 'Dimension priority significantly changed',
        description: 'This will have a major impact on risk score calculation.',
        variant: 'default',
      });
    }
  };
  
  // Function to render dimension rows or skeletons during loading
  const renderDimensionRows = () => {
    if (isLoading) {
      return Array(6).fill(0).map((_, i) => <DimensionRowSkeleton key={i} />);
    }
    
    return dimensions.map((dim, index) => (
      <DimensionRow
        key={dim.id}
        dimension={dim}
        index={index}
        onReorder={handleDimensionReorder}
        onValueChange={handleValueChange}
      />
    ));
  };
  
  // Render the page
  return (
    <DashboardLayout>
      <PageHeader
        title="Risk Score Configuration"
        description="Configure your organization's risk score calculation parameters."
      />
      
      <PageTemplate>
        <Tabs defaultValue="priority" className="w-full">
          <TabsList>
            <TabsTrigger value="priority">Dimension Priorities</TabsTrigger>
            <TabsTrigger value="comparative">Comparative Analysis</TabsTrigger>
          </TabsList>
          
          <TabsContent value="priority" className="p-0 mt-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Left column: Dimension priorities */}
              <div className="col-span-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Dimension Priorities</CardTitle>
                  </CardHeader>
                  
                  <CardContent>
                    <div className="mb-6 bg-blue-50 p-4 rounded">
                      <h3 className="text-blue-800 font-medium mb-2">How Dimension Ranking & Priorities Work</h3>
                      <p className="text-blue-700 text-sm">
                        Drag and drop dimensions to stack rank them by importance. Dimensions at the top have the highest weight in the risk 
                        score calculation, with weight decreasing as you move down the list. The priority weight is automatically calculated 
                        based on the position.
                      </p>
                    </div>
                    
                    <div className="space-y-2 mb-6">
                      <DndProvider backend={HTML5Backend}>
                        {renderDimensionRows()}
                      </DndProvider>
                    </div>
                    
                    <div className="flex justify-between mt-6">
                      <Button variant="outline" onClick={handleReset} disabled={isSaving}>
                        Reset to Defaults
                      </Button>
                      
                      <Button onClick={handleSave} disabled={isSaving}>
                        {isSaving ? (
                          <>Saving</>
                        ) : (
                          <>Save Configuration</>
                        )}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
              
              {/* Right column: Risk score summary */}
              <div className="col-span-1">
                <Card>
                  <CardHeader>
                    <CardTitle>Risk Score Summary</CardTitle>
                  </CardHeader>
                  
                  <CardContent>
                    {isLoading ? (
                      <div className="flex flex-col items-center justify-center">
                        <Skeleton className="h-40 w-40 rounded-full mb-4" />
                        <Skeleton className="h-6 w-32 rounded mb-2" />
                        <Skeleton className="h-4 w-24 rounded" />
                      </div>
                    ) : (
                      <div className="flex flex-col items-center">
                        <RiskGauge score={score} riskLevel={riskLevel} />
                        
                        <div className="mt-8 w-full">
                          <div className="flex justify-between mb-2">
                            <span className="text-sm font-medium">Risk Acceptance Level</span>
                          </div>
                          
                          <div className="flex justify-between mb-2">
                            <span className="text-sm">Low</span>
                            <span className="text-sm">High</span>
                          </div>
                          
                          <Slider
                            defaultValue={[score]}
                            min={0}
                            max={100}
                            step={1}
                            value={[score]}
                            onValueChange={(value) => {
                              handleScoreChange(value[0]);
                            }}
                            onClick={() => {
                              // When user clicks the slider, set userSetScore to true
                              if (!userSetScore) {
                                setUserSetScore(true);
                              }
                            }}
                          />
                        </div>
                        
                        <div className="mt-10 w-full">
                          <h3 className="text-base font-medium mb-2">Weight Distribution</h3>
                          
                          <p className="text-sm text-gray-500 mb-4">
                            Weight influence is automatically calculated based on dimension priority ordering
                          </p>
                          
                          {dimensions.map((dim, index) => (
                            <div key={dim.id} className="mb-2 flex items-center">
                              <div
                                className="w-3 h-3 rounded-full mr-2"
                                style={{ backgroundColor: dim.color }}
                              ></div>
                              <span className="text-sm flex-1">{dim.name}</span>
                              <span className="text-sm font-medium">{dim.weight.toFixed(0)}%</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="comparative" className="p-0 mt-4">
            <Card>
              <CardHeader>
                <CardTitle>Comparative Analysis</CardTitle>
              </CardHeader>
              
              <CardContent>
                <div className="mb-6">
                  <p className="text-sm text-gray-600">
                    Compare your risk scores across different dimensions with industry benchmarks and similar organizations.
                  </p>
                </div>
                
                <div className="h-[450px]">
                  <ComparativeVisualization 
                    companyDimensions={dimensions} 
                    isLoading={isLoading} 
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </PageTemplate>
      
      {/* Toast messages for successful save operations */}
      {isSaving && (
        <div className="fixed bottom-4 right-4 z-50">
          <Alert>
            <AlertTitle>Saving changes...</AlertTitle>
            <AlertDescription>
              Your risk score configuration is being saved.
            </AlertDescription>
          </Alert>
        </div>
      )}
    </DashboardLayout>
  );
}